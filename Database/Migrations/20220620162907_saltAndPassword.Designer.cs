// <auto-generated />
using System;
using Database.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(SwissWatersContext))]
    [Migration("20220620162907_saltAndPassword")]
    partial class saltAndPassword
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Database.Entities.ApiUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(155)
                        .HasColumnType("nvarchar(155)");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte[]>("Password")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("ApiUsers");
                });

            modelBuilder.Entity("Database.Entities.Canton", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Cantons");

                    b.HasData(
                        new
                        {
                            Id = new Guid("06032f73-ef14-422f-96f0-6853beed2e18"),
                            Code = "AG",
                            Name = "Aargau"
                        },
                        new
                        {
                            Id = new Guid("c6466559-e664-4476-9590-38ea80c94ce2"),
                            Code = "AR",
                            Name = "Appenzell Ausserrhoden"
                        },
                        new
                        {
                            Id = new Guid("fded4d5c-589d-4e9a-98fc-c17cef412c9d"),
                            Code = "AI",
                            Name = "Appenzell Innerrhoden"
                        },
                        new
                        {
                            Id = new Guid("2760d42a-dd4c-4178-862e-72be9d76a0d6"),
                            Code = "BL",
                            Name = "Basel-Landschaft"
                        },
                        new
                        {
                            Id = new Guid("9d3a110f-8535-4dd0-ad92-21ff1831679f"),
                            Code = "BS",
                            Name = "Basel-Stadt"
                        },
                        new
                        {
                            Id = new Guid("9e00712c-8eac-4f7d-9e86-2a83de68eb17"),
                            Code = "BE",
                            Name = "Bern"
                        },
                        new
                        {
                            Id = new Guid("c9584dfa-b5e6-451e-a1f4-668cda9d2496"),
                            Code = "FR",
                            Name = "Freiburg"
                        },
                        new
                        {
                            Id = new Guid("42555469-aa40-4d6c-9dd1-22a9bb038221"),
                            Code = "GE",
                            Name = "Genf"
                        },
                        new
                        {
                            Id = new Guid("d7c52353-be8c-4e4a-99a0-914346d694b7"),
                            Code = "GL",
                            Name = "Glarus"
                        },
                        new
                        {
                            Id = new Guid("439e5120-8fb7-4250-989f-d770f2e97d5e"),
                            Code = "GR",
                            Name = "Graubünden"
                        },
                        new
                        {
                            Id = new Guid("9a2ec3c7-aff0-4441-9469-0299dfb4ef9a"),
                            Code = "JU",
                            Name = "Jura"
                        },
                        new
                        {
                            Id = new Guid("7ec82657-dac4-4a55-bb67-348a496789c5"),
                            Code = "LU",
                            Name = "Luzern"
                        },
                        new
                        {
                            Id = new Guid("3d0b8a43-710e-41c3-a639-34cb8ff180d3"),
                            Code = "NE",
                            Name = "Neuenburg"
                        },
                        new
                        {
                            Id = new Guid("7fa7f7ec-9de8-48f8-8bbf-1023f299e993"),
                            Code = "NW",
                            Name = "Nidwalden"
                        },
                        new
                        {
                            Id = new Guid("a41bf4c3-e708-43ac-b4ea-a70ed155a706"),
                            Code = "OW",
                            Name = "Obwalden"
                        },
                        new
                        {
                            Id = new Guid("5537caf0-b08b-4b97-b5eb-5673bda04896"),
                            Code = "SH",
                            Name = "Schaffhausen"
                        },
                        new
                        {
                            Id = new Guid("5be6fa4b-552d-4dca-aa97-04833053555e"),
                            Code = "SZ",
                            Name = "Schwyz"
                        },
                        new
                        {
                            Id = new Guid("45cbaebf-ec54-4959-8ec7-ea885bd4ce2b"),
                            Code = "SO",
                            Name = "Solothurn"
                        },
                        new
                        {
                            Id = new Guid("e0f60abc-7ac4-4baf-aa7d-f0e25b18a171"),
                            Code = "SG",
                            Name = "St. Gallen"
                        },
                        new
                        {
                            Id = new Guid("c35ce2c3-67f7-43cc-91cd-3a0e982993cb"),
                            Code = "TI",
                            Name = "Tessin"
                        },
                        new
                        {
                            Id = new Guid("23ba02aa-c3db-4a2a-9ae9-d10142ca120d"),
                            Code = "TG",
                            Name = "Thurgau"
                        },
                        new
                        {
                            Id = new Guid("cfc407a1-77a2-40e6-835b-81c6474c170c"),
                            Code = "UR",
                            Name = "Uri"
                        },
                        new
                        {
                            Id = new Guid("1b06caa3-c7e3-46a5-b1b9-660d2701e97b"),
                            Code = "VD",
                            Name = "Waadt"
                        },
                        new
                        {
                            Id = new Guid("6ace043e-74f9-4d4f-a3e3-4ace1f697be8"),
                            Code = "VS",
                            Name = "Wallis"
                        },
                        new
                        {
                            Id = new Guid("0721fe5d-8207-44bd-b250-8e302e69946b"),
                            Code = "ZG",
                            Name = "Zug"
                        },
                        new
                        {
                            Id = new Guid("76ee787c-959d-4891-b49b-b2595d4aeade"),
                            Code = "ZH",
                            Name = "Zürich"
                        });
                });

            modelBuilder.Entity("Database.Entities.CantonStation", b =>
                {
                    b.Property<Guid>("CantonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CantonId", "StationId");

                    b.HasIndex("StationId");

                    b.ToTable("CantonStations");
                });

            modelBuilder.Entity("Database.Entities.Measurement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Max24H")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal?>("Mean24H")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<DateTime>("MeasurementTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Min24H")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<Guid>("StationAbilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Value")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.HasKey("Id");

                    b.HasIndex("StationAbilityId");

                    b.ToTable("Measurements");
                });

            modelBuilder.Entity("Database.Entities.Station", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Easting")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Northing")
                        .HasColumnType("int");

                    b.Property<string>("WatersName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WatersTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WatersTypeId");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("Database.Entities.StationAbility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("StationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("StationId");

                    b.ToTable("StationAbilities");
                });

            modelBuilder.Entity("Database.Entities.UserClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApiUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ApiUserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Database.Entities.WatersType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("WatersTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fcb40261-58d2-4c72-bda2-b37e937935e3"),
                            Identifier = "LAKE",
                            Name = "See"
                        },
                        new
                        {
                            Id = new Guid("81823956-e0de-4abf-b292-94d154efe6ad"),
                            Identifier = "RIVER",
                            Name = "Fluss"
                        },
                        new
                        {
                            Id = new Guid("0b4f1f78-e966-4f92-aa71-dac67c3a6020"),
                            Identifier = "STREAM",
                            Name = "Bach"
                        });
                });

            modelBuilder.Entity("Database.Entities.CantonStation", b =>
                {
                    b.HasOne("Database.Entities.Canton", "Canton")
                        .WithMany("CantonStations")
                        .HasForeignKey("CantonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Entities.Station", "Station")
                        .WithMany("CantonStations")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Canton");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("Database.Entities.Measurement", b =>
                {
                    b.HasOne("Database.Entities.StationAbility", "StationAbility")
                        .WithMany("Measurements")
                        .HasForeignKey("StationAbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StationAbility");
                });

            modelBuilder.Entity("Database.Entities.Station", b =>
                {
                    b.HasOne("Database.Entities.WatersType", "WatersType")
                        .WithMany()
                        .HasForeignKey("WatersTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("WatersType");
                });

            modelBuilder.Entity("Database.Entities.StationAbility", b =>
                {
                    b.HasOne("Database.Entities.Station", "Station")
                        .WithMany("StationAbilities")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Station");
                });

            modelBuilder.Entity("Database.Entities.UserClaim", b =>
                {
                    b.HasOne("Database.Entities.ApiUser", "ApiUser")
                        .WithMany("UserClaims")
                        .HasForeignKey("ApiUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApiUser");
                });

            modelBuilder.Entity("Database.Entities.ApiUser", b =>
                {
                    b.Navigation("UserClaims");
                });

            modelBuilder.Entity("Database.Entities.Canton", b =>
                {
                    b.Navigation("CantonStations");
                });

            modelBuilder.Entity("Database.Entities.Station", b =>
                {
                    b.Navigation("CantonStations");

                    b.Navigation("StationAbilities");
                });

            modelBuilder.Entity("Database.Entities.StationAbility", b =>
                {
                    b.Navigation("Measurements");
                });
#pragma warning restore 612, 618
        }
    }
}
